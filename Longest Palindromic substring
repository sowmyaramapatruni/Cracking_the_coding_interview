

// Dynamic programming
class Solution {
public:
    string longestPalindrome(string s) {
        
        int length = s.length();
        bool table[length][length] = {};
 
        int maxlength = 1;
        int start =0;
        
        
        for(int i =0;i<length;i++){
            table[i][i] = true;
          
            
        }
        
        for(int i=0;i<length-1;i++){
            if(s[i] ==s[i+1]){
                table[i][i+1] = true;
                maxlength = 2;
                start =i;
            }
        }
        
        for(int k=3;k<=length;k++){
            for(int j =0;j<length-k+1;j++){
                int i = j+k-1;
                if(s[j] == s[i] && table[j+1][i-1] == true){
                    table[j][i] = true;
                    if(k>maxlength){
                        
                        maxlength = k;
                        start = j;
                        std::cout<<maxlength<<endl;
                    }
                }
            }
        }
        std::cout<<start<<" "<<maxlength<<endl;
        std::cout<<s.substr(start,maxlength);
        return s.substr(start,maxlength);
        
    }
};


// Normal solution


#include<algorithm>

class Solution {
public:
    string longestPalindrome(string s) {
        
       int n = s.length();
        string max;
       
        for(int i =0;i<n;i++){
            
            string str1 = checkPalindrome(s,i,i);
            if(str1.length()>max.length())
                max = str1;
                
            
            string str2 = checkPalindrome(s,i,i+1);
            if(str2.length()>max.length())
                max = str2;
            
            
        }
        
        return max;
    }
    
    string checkPalindrome(string s, int left, int right){
        
        while(left >=0 && right <s.length() && s[left] == s[right]){
            left --;
            right ++;
        }
        return s.substr(left+1,right-left-1);
    }
};
